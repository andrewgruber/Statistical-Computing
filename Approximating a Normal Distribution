---
title: "Lab 1"
author: "Andrew Gruber - arg2223"
date: "Sep 13, 2019"
output:
  html_document:
    df_print: paged
---

```{r, echo = FALSE}
set.seed(1) # Please don't remove this code!
```

# Instructions 
Before you leave lab today make sure that you upload an RMarkdown file to the canvas page (this should have a .Rmd extension) as well as the pdf output after you have knitted the file (this will have a .pdf extension).  Note that since you have already knitted this file, you should see both a **Lab1_UNI.pdf** and a **Lab1_UNI.Rmd** file in your GR4206 folder.  Click on the **Files** tab to the right to see this.  The files you upload to the Canvas page should be updated with commands you provide to answer each of the questions below.  You can edit this file directly to produce your final solutions. 

# Background: The Normal Distribution
Recall from your probability class that a random variable $X$ is normally-distributed with mean $\mu$ and variance $\sigma^2$ (denoted $X \sim N(\mu, \sigma^2)$) if it has a probability density function, or *pdf*, equal to

\[f(x) = \frac{1}{\sqrt{2\pi \sigma^2}} e^{-\frac{(x - \mu)^2}{2\sigma^2}}.\]

In *R* we can simulate $N(\mu, \sigma^2)$ random variables using the \texttt{rnorm()} function.  For example,

```{r}
rnorm(n = 5, mean = 10, sd = 3)
```

outputs 5 normally-distributed random variables with mean equal to 10 and standard deviation (this is $\sigma$) equal to 3.  If the second and third arguments are ommited the default rates are **mean = 0** and **sd = 1**, which is referred to as the "standard normal distribution".

# Tasks

## Sample means as sample size increases

1) Generate 100 random draws from the standard normal distribution and save them in a vector named **normal100**.  Calculate the mean and standard deviation of **normal100**.  In words explain why these values aren't exactly equal to 0 and 1.

```{r}

normal100 <- rnorm(n=100)
#Sample Mean:
mean(normal100)
#Sample Standard Deviation: 
sd(normal100)

```
These values are not exactly equal to 0 and 1 respectively because these are calculated from a sample of 100. As the number of normal random variables we are drawing from approaches infiniti, then we can expect the mean and standard deviation to approach 0 and 1. Now, however, with only 100 random draws from a standard normal distribution, the sample can be skewed, meaning that the draw randomly selected more from one sided than the other. 


2) The function **hist()** is a base *R* graphing function that plots a histogram of its input.  Use **hist()** with your vector of standard normal random variables from question (1) to produce a histogram of the standard normal distribution.  Remember that typing **?hist** in your console will provide help documents for the **hist()** function.  If coded properly, these plots will be automatically embedded in your output file.
```{r}

hist(normal100)

```

3) Repeat question (1) except change the number of draws to 10, 1000, 10,000, and 100,000 storing the results in vectors called **normal10**, **normal1000**, **normal10000**, **normal100000**.  
```{r}

normal10 <- rnorm(n=10)
mean(normal10)
sd(normal10)
normal1000 <- rnorm(n=1000)
mean(normal1000)
sd(normal1000)
normal10000 <- rnorm(n=10000)
mean(normal10000)
sd(normal10000)
normal100000<-rnorm(n=100000)
mean(normal100000)
sd(normal100000)
```
As we draw more, the mean and standard deviation approach 0 and 1, which is what our intuition tells us. 

4) We want to compare the means of our four random draws.  Create a vector called **sample_means** that has as its first element the mean of **normal10**, its second element the mean of **normal100**, its third element the mean of **normal1000**, its fourth element the mean of **normal10000**, and its fifth element the mean of **normal100000**.  After you have created the **sample_means** vector, print the contents of the vector and use the **length()** function to find the length of this vector.  (it should be five).  There are, of course, multiple ways to create this vector.  Finally, explain in words the pattern we are seeing with the means in the **sample_means** vector.
```{r}

sample_means<-c(mean(normal10),mean(normal100),mean(normal1000),mean(normal10000),mean(normal100000))
print(sample_means)
length(sample_means)

```
This vector of means confirms the intuition, that with increasing sampling, the sample mean should increasingly approach 0. Here, we see that with only 10 observations, the sample mean can be quite far from 0. However, with increasing observations we get increasingly close to 0. 

## Sample distribution of the sample mean

5)  Let's push this a little farther.  Generate 1 million random draws from a normal distribution with $\mu = 3$ and $\sigma^2 = 4$ and save them in a vector named **normal1mil**.  Calculate the mean and standard deviation of **normal1mil**.
```{r}
normal1mil<-rnorm(n=1000000, mean=3, sd=4)
mean(normal1mil)
sd(normal1mil)

```

6) Find the mean of all the entries in **normal1mil** that are greater than 3.  You may want to generate a new vector first which identifies the elements that fit the criteria.
```{r}
normal1mil_modified=normal1mil[normal1mil>3]
mean(normal1mil_modified)
#Calculates the mean of the modified vector of normal random variables, where they are greater than 3 
```

7) Create a matrix **normal1mil_mat** from the vector **normal1mil** that has 10,000 columns (and therefore should have 100 rows).
```{r}
normal1mil_mat<-matrix(normal1mil, nrow=100, ncol=10000)
```

8) Calculate the mean of the $1234^{th}$ column.
```{r}
column1234<-normal1mil_mat[,1234]
mean(column1234)
```


9) Use the **colSums()** functions to calculate the *means* of each column of **normal1mil_mat**.  Remember, **?colSums** will give you help documents about this function.  Save the vector of column means with an appropriate name as it will be used in the next task.

```{r}
column_sums<-colSums(normal1mil_mat)
column_means<-column_sums/100
```



10) Finally, produce a histogram of the column means you calculated in task (9).  What is the distribution that this histogram approximates (i.e.\ what is the distribution of the sample mean in this case)?
```{r}
hist(column_means)
```
This approximates the normal distribution. The sample means from a normal distribution is distributed normally. 
